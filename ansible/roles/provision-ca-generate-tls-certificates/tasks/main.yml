---
- name: "Files dir should exist"
  file:
    path: "{{playbook_dir}}/files"
    state: directory
- name: Create ca-config.json
  template:
    src: ca-config.json.j2
    dest: "{{playbook_dir}}/files/ca-config.json"
- name: Create ca-csr.json
  template:
    src: generic-csr.json.j2
    dest: "{{playbook_dir}}/files/ca-csr.json"
  vars:
    csr_CN: "Kubernetes"
    csr_O: "Kubernetes"
- name: Gen CA Cert
  shell:
    cmd: |
      cfssl gencert -initca ca-csr.json | cfssljson -bare ca
    chdir: "{{playbook_dir}}/files"

- name: create admin-csr.json
  template:
    src: generic-csr.json.j2
    dest: "{{playbook_dir}}/files/admin-csr.json"
  vars:
    csr_CN: "admin"
    csr_O: "system:masters"
- name: Gen Admin Cert
  shell:
    cmd: >
      cfssl gencert
      -ca=ca.pem
      -ca-key=ca-key.pem
      -config=ca-config.json
      -profile=kubernetes
      admin-csr.json | cfssljson -bare admin
    chdir: "{{playbook_dir}}/files"

- name: create worker csrs
  template:
    src: generic-csr.json.j2
    dest: "{{playbook_dir}}/files/worker-{{item}}-csr.json"
  vars:
    csr_CN: "system:node:{{item}}"  # TODO: does this break?
    csr_O: "system:nodes"
  with_items:
    - 0
    - 1
    - 2
- debug:
    msg: "{{hostvars['worker-0'].public_ip}}"
- name: Gen Worker Certs
  shell:
    cmd: >-
      cfssl gencert
      -ca=ca.pem
      -ca-key=ca-key.pem
      -config=ca-config.json
      -hostname=worker-{{item}},{{hostvars["worker-{{item}}"].public_ip}},{{hostvars["worker-{{item}}"].internal_ip}}
      -profile=kubernetes
      worker-{{item}}-csr.json | cfssljson -bare worker-{{item}}
    chdir: "{{playbook_dir}}/files"
  loop:
    - 0
    - 1
    - 2

- name: create controller manager client csr
  template:
    src: generic-csr.json.j2
    dest: "{{playbook_dir}}/files/kube-controller-manager-csr.json"
  vars:
    csr_CN: "system:kube-controller-manager"
    csr_O: "system:kube-controller-manager"
- name: Gen Controller Manager Client Certificate
  shell:
    cmd: >
      cfssl gencert
      -ca=ca.pem
      -ca-key=ca-key.pem
      -config=ca-config.json
      -profile=kubernetes
      kube-controller-manager-csr.json | cfssljson -bare kube-controller-manager
    chdir: "{{playbook_dir}}/files"


- name: create kube proxy client csr
  template:
    src: generic-csr.json.j2
    dest: "{{playbook_dir}}/files/kube-proxy-csr.json"
  vars:
    csr_CN: "system:kube-proxy"
    csr_O: "system:node-proxier"
- name: Gen Kube Proxy Client Certificate
  shell:
    cmd: >
      cfssl gencert
      -ca=ca.pem
      -ca-key=ca-key.pem
      -config=ca-config.json
      -profile=kubernetes
      kube-proxy-csr.json | cfssljson -bare kube-proxy
    chdir: "{{playbook_dir}}/files"


- name: create scheduler client csr
  template:
    src: generic-csr.json.j2
    dest: "{{playbook_dir}}/files/kube-scheduler-csr.json"
  vars:
    csr_CN: "system:kube-scheduler"
    csr_O: "system:kube-scheduler"
- name: Gen Scheduler Client Certificate
  shell:
    cmd: >
      cfssl gencert
      -ca=ca.pem
      -ca-key=ca-key.pem
      -config=ca-config.json
      -profile=kubernetes
      kube-scheduler-csr.json | cfssljson -bare kube-scheduler
    chdir: "{{playbook_dir}}/files"

- name: create api server csr
  template:
    src: generic-csr.json.j2
    dest: "{{playbook_dir}}/files/kubernetes-csr.json"
  vars:
    csr_CN: "kubernetes"
    csr_O: "Kubernetes"
- name: Gen Kubernetes API Server Certificate
  shell:
    cmd: >
      cfssl gencert
      -ca=ca.pem
      -ca-key=ca-key.pem
      -config=ca-config.json
      -hostname=10.32.0.1,10.240.0.10,10.240.0.11,10.240.0.12,{{kubernetes_public_address}},127.0.0.1,{{kubernetes_hostnames}}
      -profile=kubernetes
      kubernetes-csr.json | cfssljson -bare kubernetes
    chdir: "{{playbook_dir}}/files"
  vars:
    # kubernetes_public_address generated by tf ansible_resources.tf to group_vars/all/kubernetes_public_address.yml
    kubernetes_hostnames: "kubernetes,kubernetes.default,kubernetes.default.svc,kubernetes.default.svc.cluster,kubernetes.svc.cluster.local"

- name: create service account csr
  template:
    src: generic-csr.json.j2
    dest: "{{playbook_dir}}/files/service-account-csr.json"
  vars:
    csr_CN: service-accounts
    csr_O: Kubernetes
  notify:
    - "Gen Service Account Certificate"
- name: Gen Service Account Certificate
  shell:
    cmd: >
      cfssl gencert
      -ca=ca.pem
      -ca-key=ca-key.pem
      -config=ca-config.json
      -profile=kubernetes
      service-account-csr.json | cfssljson -bare service-account
    chdir: "{{playbook_dir}}/files"
