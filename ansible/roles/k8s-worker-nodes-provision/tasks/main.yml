---
- name: "Install Package Dependencies"
  package:
    name:
      - socat  # used by kubectl port-forward
      - conntrack
      - ipset
    state: present

- name: Disable SWAP since kubernetes can't work with swap enabled (1/2)
  shell: |
    swapoff -a

- name: Disable SWAP in fstab since kubernetes can't work with swap enabled (2/2)
  replace:
    path: /etc/fstab
    regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
    replace: '# \1'

- name: Create installation directories
  file:
    state: directory
    path: "{{item}}"
  loop:
    - /etc/containerd
    - /etc/cni/net.d
    - /opt/cni/bin
    - /var/lib/kubelet
    - /var/lib/kube-proxy
    - /var/lib/kubernetes
    - /var/run/kubernetes

- name: Download and install kubernetes worker binaries + runc
  get_url:
    url: "{{item.url}}"
    dest: "/usr/local/bin/{{item.name}}"
    mode: "755"
  loop:
    - { "name": "kubectl", url: "https://storage.googleapis.com/kubernetes-release/release/v1.18.6/bin/linux/amd64/kubectl" }
    - { "name": "kube-proxy", url: "https://storage.googleapis.com/kubernetes-release/release/v1.18.6/bin/linux/amd64/kube-proxy" }
    - { "name": "kubelet", url: "https://storage.googleapis.com/kubernetes-release/release/v1.18.6/bin/linux/amd64/kubelet" }
    - { "name": "kubelet", url: "https://storage.googleapis.com/kubernetes-release/release/v1.18.6/bin/linux/amd64/kubelet" }
    - { name: "runc", url: "https://github.com/opencontainers/runc/releases/download/v1.0.0-rc91/runc.amd64" }

- name: Download additional packages files for extraction
  get_url:
    url: "{{item}}"
    dest: "/tmp/"
  loop:
    - "https://github.com/kubernetes-sigs/cri-tools/releases/download/v1.18.0/crictl-v1.18.0-linux-amd64.tar.gz"
    - "https://github.com/containerd/containerd/releases/download/v1.3.6/containerd-1.3.6-linux-amd64.tar.gz"
    - "https://github.com/containernetworking/plugins/releases/download/v0.8.6/cni-plugins-linux-amd64-v0.8.6.tgz"

- name: Download and install crictl
  unarchive:
    src: "/tmp/crictl-v1.18.0-linux-amd64.tar.gz"
    dest: /usr/local/bin/
    remote_src: yes
    mode: "755"

- name: "Download and install cni plugins"
  unarchive:
    src: "/tmp/cni-plugins-linux-amd64-v0.8.6.tgz"
    dest: /opt/cni/bin/
    remote_src: yes

- name: "Download and install containerd"
  unarchive:
    src: "/tmp/containerd-1.3.6-linux-amd64.tar.gz"
    dest: /usr/local/bin/
    remote_src: yes
    mode: "755"
    extra_opts:
      - "--transform"
      - "s/bin//"  # remove the bin/ path
      # - "bin/*"      # keep bin's content, but not the directory itself

- name: Create  the bridge network configuration filetem
  template:
    src: 10-bridge.conf.j2
    dest: /etc/cni/net.d/10-bridge.conf

- name: Create the loopback network configuration file
  template:
    src: 99-loopback.conf.j2
    dest: /etc/cni/net.d/99-loopback.conf

- name: Create the containerd configuration file
  template:
    src: containerd_config.toml.j2
    dest: /etc/containerd/config.toml

- name: Create the containerd.service systemd file
  template:
    src: containerd.service.j2
    dest: /etc/systemd/system/containerd.service

- name: Create kubelet dirs
  file:
    path: "{{item}}"
    state: directory
    mode: "755"
  loop:
    - "/var/lib/kubernetes"
    - "/var/lib/kubelet"
    - "/var/lib/kubelet/kubeconfig"
    - "/var/lib/kube-proxy"
    - "/var/lib/kube-proxy/kubeconfig"

- name: Add cert and key
  copy:
    src: secure/{{inventory_hostname}}{{item}}.pem
    dest: /var/lib/kubelet/
    mode: "644" # TODO
  loop:
    - ""
    - "-key"


- name: Add kubeconfig
  copy:
    src: kubeconfig/{{inventory_hostname}}.kubeconfig
    dest: /var/lib/kubelet/kubeconfig/
    mode: "644" # TODO

- name: Add ca.pem
  copy:
    src: secure/ca.pem
    dest: /var/lib/kubernetes/

- name: Create the kubelet-config.yaml config file
  template:
    src: kubelet-config.yaml.j2
    dest: /var/lib/kubelet/kubelet-config.yaml

- name: Create the kubelet.service systemd unit file
  template:
    src: kubelet.service.j2
    dest: /etc/systemd/system/kubelet.service

- name: Copy the kubernetes proxy config
  copy:
    src: kubeconfig/kube-proxy.kubeconfig
    dest: /var/lib/kube-proxy/kubeconfig/

- name: Create the kube-proxy-config.yaml configuration file
  template:
    src: kube-proxy-config.yaml.j2
    dest: /var/lib/kube-proxy/kubeconfig/kube-proxy-config.yaml

- name: Create the kube-proxy.service systemd unit file
  template:
    src: kube-proxy.service.j2
    dest: /etc/systemd/system/kube-proxy.service

- name: Enable and (re)start the worker services
  systemd:
    name: "{{item}}"
    state: restarted
    enabled: yes
    daemon_reload: yes
  loop:
    - "containerd"
    - "kubelet"
    - "kube-proxy"
