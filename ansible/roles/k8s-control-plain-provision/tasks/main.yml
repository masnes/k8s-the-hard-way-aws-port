---
- name: Ensure kubernetes conf dirs exist
  file:
    path: '{{item}}'
    state: directory
    owner: root
    group: root
    mode: '755'
  loop:
    - "/etc/kubernetes"
    - "/etc/kubernetes/config"

- name: "install dependency programs"
  apt:
    pkg:
      - apt-transport-https
      - gnupg2
      - curl
- name: "Add kubernetes apt key"
  apt_key:
    url: "https://packages.cloud.google.com/apt/doc/apt-key.gpg"

- name: "Add kubernetes-xenial repo"
  apt_repository:
    repo: 'deb https://apt.kubernetes.io/ kubernetes-xenial main'
    filename: 'kubernetes'

- name: "Install kubectl from repo"
  apt:
    pkg:
      - kubectl
    update_cache: yes

- name: "Snap is a pre-requisite"
  systemd:
    name: "snapd"
    state: "started"
    enabled: yes

- name: "Install additional pre-requisites"
  snap:
    name: "{{item}}"
    classic: yes
  loop:
    - kube-apiserver
    - kube-controller-manager
    - kube-scheduler

- name: "Create config dir"
  file:
    path: "/var/lib/kubernetes"
    state: directory
    owner: root
    group: root
    mode: "755"

- name: "Reference secrets"
  file:
    src: "/var/lib/k8s_secrets/{{item}}"
    dest: "/var/lib/kubernetes/{{item}}"
    owner: root
    group: root
    state: link
  loop:
    - ca.pem
    - ca-key.pem
    - kubernetes.pem
    - kubernetes-key.pem
    - service-account.pem
    - service-account-key.pem
    - encryption-config.yaml

- name: "Set kube-apiserver config"
  command:
    cmd: |
      snap set kube-apiserver
      advertise-address={{internal_ip}}
      allow-privileged=true
      apiserver-count=3
      audit-log-maxage=30
      audit-log-maxbackup=3
      audit-log-maxsize=100
      audit-log-path=/var/log/audit.log
      authorization-mode=Node,RBAC
      bind-address=0.0.0.0
      client-ca-file=/var/lib/kubernetes/ca.pem
      enable-admission-plugins=NamespaceLifecycle,NodeRestriction,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota
      etcd-cafile=/var/lib/kubernetes/ca.pem
      etcd-certfile=/var/lib/kubernetes/kubernetes.pem
      etcd-keyfile=/var/lib/kubernetes/kubernetes-key.pem
      etcd-servers=https://10.240.0.10:2379,https://10.240.0.11:2379,https://10.240.0.12:2379
      event-ttl=1h
      encryption-provider-config=/var/lib/kubernetes/encryption-config.yaml
      kubelet-certificate-authority=/var/lib/kubernetes/ca.pem
      kubelet-client-certificate=/var/lib/kubernetes/kubernetes.pem
      kubelet-client-key=/var/lib/kubernetes/kubernetes-key.pem
      kubelet-https=true
      runtime-config='api/all=true'
      service-account-key-file=/var/lib/kubernetes/service-account.pem
      service-cluster-ip-range=10.32.0.0/24
      service-node-port-range=30000-32767
      tls-cert-file=/var/lib/kubernetes/kubernetes.pem
      tls-private-key-file=/var/lib/kubernetes/kubernetes-key.pem
      v=2

- name: Place  kube-controller-manager kubeconfig
  copy:
    src: kubeconfig/kube-controller-manager.kubeconfig
    dest: /var/lib/kubernetes/
    owner: root
    group: root
    mode: "644"

- name: Set kube controller manager settings
  command:
    cmd: |
      snap set kube-controller-manager
      bind-address=0.0.0.0
      cluster-cidr=10.200.0.0/16
      cluster-name=kubernetes
      cluster-signing-cert-file=/var/lib/kubernetes/ca.pem
      cluster-signing-key-file=/var/lib/kubernetes/ca-key.pem
      kubeconfig=/var/lib/kubernetes/kube-controller-manager.kubeconfig
      leader-elect=true
      root-ca-file=/var/lib/kubernetes/ca.pem
      service-account-private-key-file=/var/lib/kubernetes/service-account-key.pem
      service-cluster-ip-range=10.32.0.0/24
      use-service-account-credentials=true
      v=2

- name: Place the kube-scheduler kubeconfig
  copy:
    src: kubeconfig/kube-scheduler.kubeconfig
    dest: /var/lib/kubernetes/
    owner: root
    group: root
    mode: "644"

- name: Create kube-scheduler config
  template:
    src: kube-scheduler.yaml.j2
    dest: /var/lib/kubernetes/kube-scheduler.yaml
    owner: root
    group: root
    mode: "644"

- name: Set kube scheduler settings
  command:
    cmd: |
      snap set kube-controller-manager
      config=/etc/kubernetes/config/kube-scheduler.yaml
      v=2

- name: Systemd daemon reload
  systemd:
    daemon_reload: yes

- name: Enable and (re)start control plane services
  systemd:
    name: "{{item}}"
    enabled: yes
    state: restarted
  loop:
    - snap.kube-apiserver
    - snap.kube-controller-manager
    - snap.kube-scheduler
